<?php

define('CAS_URI', preg_replace('@^/@', '', variable_get('cas_uri', '')));
define('COOKIE_EXPIRES', time() + 60*60*24*365*10);
define('COOKIE_PATH', '/');
/**
 * Implementation of hook_init().

 function ucb_mma_init() {

 }
 */

/**
 * Implementation of hook_menu_alter().
 *
 * @param $items Associative array of menu router definitions returned from hook_menu().
 */
function ucb_mma_menu_alter(&$items) {

	$items['user'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'ucb_mma_user_page',
	//    'access arguments' => TRUE, //TODO: why does user.module use this.  error here.
	  'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,  
	);

	$items['user/register'] = array(
    'title' => 'User Registration',
    'description' => '',
    'page callback' => 'ucb_mma_user_registration_page',
	  'access callback' => 'user_register_access',
    'type' => MENU_CALLBACK,  
	);

	$items['user/password'] = array(
    'title' => 'Request new password',
	//'page callback' => 'drupal_get_form',
    'page callback' => 'ucb_mma_user_pass_page',
	//'page arguments' => array('user_pass'),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
	//'file' => drupal_get_path('module', 'user') . '/' . 'user.pages.inc',
	//'file' => 'user.pages.inc',
	);

}

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */

function ucb_mma_menu() {
	$items = array();

	$items['mma'] = array(
    'title' => '',
    'description' => '',
    'page callback' => '',
    'page callback' => 'ucb_mma_explanation_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Implementation of hook_form_alter().
 */

/*
 function ucb_mma_form_alter(&$form, $form_state, $form_id) {
 //TODO: revive form_alter make js degradation nicer?
 $login_method = ucb_mma_login_method();
 switch($form_id) {
 case 'user_login_block':
 if ($_COOKIE['mma_method'] === '0') {

 * If Calnet, remove "create a new account" to keep things simple.
 * Note: variable_set('user_register', 0) not appropriate for MMA.

 //$form['links']['#value'] = '<div class="item-list"><ul><li class="first"><a href="/user/password" title="Request new password via e-mail.">Request new password</a></li></ul></div>';
 }
 $form['pass']['#description'] = t('Your login method is !method. <a href="/mma/help">Change?</a>', array('!method' => $login_method ));
 break;
 case 'user_login':
 //$form['pass']['#description'] .= '<br />' . t('Your login method is !method. <a href="/mma/help">Change?</a>', array('!method' => $login_method ));
 if ($_COOKIE['mma_method'] === '1') {
 $form['links']['#value'] = '<div class="item-list"><ul><li class="first"><a href="/user/register" title="Create a new user account.">Create new account</a></li>
 <li class="last"><a href="/user/password" title="Request new password via e-mail.">Request new password</a></li>
 </ul></div>';
 }
 break;
 case 'cas_login_block':
 $form['links']['#value'] = '<div class = "description">'. t('Your login method is !method. <a href="/mma/help">Change?</a>', array('!method' => $login_method )) . '</div>';
 break;

 }
 }
 */

function ucb_mma_form_alter(&$form, $form_state, $form_id) {
	//TODO: revive form_alter make js degradation nicer?

	switch($form_id) {
		case 'user_login_block':
			/*
			 * If Calnet, remove "create a new account" to keep things simple.
			 * Note: variable_set('user_register', 0) not appropriate for MMA.
			 */
			$form['pass']['#description'] = t('');
			//$form['links'] = '<div class = "description"></div>';
			break;
		case 'user_login':
			$form['links']['#value'] = '<div class="item-list"><ul><li class="first"><a href="/user/register" title="Create a new user account.">Create new account</a></li>
 <li class="last"><a href="/user/password" title="Request new password via e-mail.">Request new password</a></li>
 </ul></div>';
			$form['links']['#weight'] = $form['submit']['#weight'] + 1; 
			break;
		case 'cas_login_block':
			$form['links']['#value'] = '<div class = "description"></div>';
			break;

	}
}

/**
 * Return login method based on $_COOKIE['mma_method']
 */
function ucb_mma_login_method() {
	switch($_COOKIE['mma_method']) {
		case '0':
			return 'Calnet';
			break;
		case '1':
			return 'Standard';
			break;
	}
}

/**
 * Change method explanation page
 */
function ucb_mma_explanation_page() {
	drupal_set_title('Login Method Help');
	drupal_set_message('If you change your login method you may loose access to content you created before the change.', 'warning', FALSE);
	return drupal_get_form('ucb_mma_explanation');
}

/**
 * user page: login or view user data
 */
function ucb_mma_user_page() {

	// move logic to javascript
	/*
	if ($_COOKIE['mma_method'] === '0') {
	include_once(drupal_get_path('module', 'cas') . '/cas.module');
	return drupal_get_form('cas_login_block');
	}
	elseif  ($_COOKIE['mma_method'] === '1') {
	if (variable_get("cas_login_form", "") != 0) {
	drupal_set_message('Error: UCB MMA requires that you use "Do not add link to login forms" at /admin/user/cas', 'error', FALSE);
	return '<p></p>';
	}
	return drupal_get_form('user_login');
	}
	else {
	drupal_set_title('Choose Login Method');
	return drupal_get_form('ucb_mma_login', $_GET['mma']);
	}
	*/
	ucb_mma_add_js();
	//drupal_set_title('Choose Login Method');
	$mma_form = '<div id = "ucb_mma-login"><h2>Choose Login Method</h2>' . drupal_get_form('ucb_mma_login', $_GET['mma']) . '</div>';
	return $mma_form;
}

/**
 * user password request
 */
function ucb_mma_user_pass_page() {
	include_once(drupal_get_path('module', 'user') . '/user.pages.inc');
	return drupal_get_form('user_pass');
}

/**
 * user registration page
 */
function ucb_mma_user_registration_page($step = 0) {
	//only anonymous users will get here
	switch ($_COOKIE['mma_method']) {
		case '0':
			drupal_goto(CAS_URI);
			break;
		case '1':
			return drupal_get_form('user_register');
			break;
	}

	switch($step) {
		case 0:
			return drupal_get_form('ucb_mma_register');
			break;
		case 1:
			return drupal_get_form('user_register');
			break;
	}

	/*
	 if ($step == 0) {
		return drupal_get_form('ucb_mma_register');
		}
		elseif ($step == 1) {
		drupal_set_title("User Registration: Step 2");
		return drupal_get_form('user_register');
		}
		*/
}

/**
 *
 * ucb_mma user registration form
 */
function ucb_mma_register() {
	$form = array();
	$form['mma_method'] = array(
    '#type' => 'radios',
	//'#title' => t('Login method'),
    '#options' => array(
	t('Calnet'),
	t('Standard (Drupal)'),
	),
	  '#default_value' => '', 
    '#description' => t('If you are UC Berkeley staff, student, or affiliate, choose Calnet.<br />Everyone else choose should choose Standard.'),
	//'#default_value' => $edit['custom'],
	);

	$form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
	);
	return $form;
}

function ucb_mma_register_submit($form, &$form_state) {
	switch ($form_state['values']['mma_method']) {
		case '0':
			setcookie('mma_method', '0', COOKIE_EXPIRES, COOKIE_PATH);
			drupal_goto(CAS_URI);
			break;
		case 1:
			setcookie('mma_method', '1', COOKIE_EXPIRES, COOKIE_PATH);
			drupal_goto('user/register/1');
			break;
		default:
			watchdog('ucb_mma', 'Invalid authentication type.', '', WATCHDOG_ERROR);
	}
}

/**
 *
 * ucb_mma user registration form
 */
function ucb_mma_login() {
	$form = array();
	$form['mma_method'] = array(
    '#type' => 'radios',
	//    '#title' => t('Login method'),
    '#options' => array(
	t('Use Calnet'),
	t('Use Standard (Drupal)'),
	),
  '#description' => t('If you are UC Berkeley staff, student, or affiliate, choose Calnet.<br />Everyone else choose should Standard.'),
	'#default_value' => $_GET['mma'],
	);
	$form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
	);
	return $form;
}

function ucb_mma_login_submit($form, &$form_state) {
	switch ($form_state['values']['mma_method']) {
		case '0':
			setcookie('mma_method', '0', COOKIE_EXPIRES, COOKIE_PATH);
			break;
		case 1:
			setcookie('mma_method', '1', COOKIE_EXPIRES, COOKIE_PATH);
			break;
		default:
			watchdog('ucb_mma', 'Invalid authentication type.', '', WATCHDOG_ERROR);
	}
	// if they clicked Change on the block leave them at the current pg
	//if ($form['#parameters'][2] !== 1) {
	drupal_goto('user');
	//}
}

/**
 * Add js
 */
function ucb_mma_add_js($block = FALSE) {
	$title = '';
	if ($block) {
		$block = '_block';
	}
	else {
		$block = '';
		$title = '<h2>User Login</h2>';
	}
	//render the possible forms and pass them to javascript
	$login_forms = array();
	$login_forms[] = $title . drupal_get_form('cas_login_block'); //0th
	$login_forms[] = $title . drupal_get_form('user_login' . $block);
	drupal_add_js(array('ucb_mma' => $login_forms), 'setting');
	drupal_add_js(drupal_get_path('module', 'ucb_mma') . '/js/ucb_mma_login_block.js');

}

/**
 * Implements hook_block().
 *
 * Provides MMA login block for anonymous users.
 */
function ucb_mma_block($op = 'list', $delta = 0, $edit = array()) {
	global $user;
	if ($op == 'list') {
		$blocks = array();
		$blocks[0]['info'] = t('Mixed Mode login');
		$blocks[1]['info'] = t('Mixed Mode Login (js)');
		return $blocks;
	}
	elseif ($op == 'view') {
		$block = array();

		switch ($delta) {
			case 0:
				// For usability's sake, avoid showing two login forms on one page.
				if (!$user->uid && !(arg(0) == 'user' && !is_numeric(arg(1)))) {
					ucb_mma_add_js(TRUE);
					$block['subject'] = t('User login');
					//$block['content'] = ucb_mma_block_content(); //remove this function?
					$block['content'] = drupal_get_form('ucb_mma_login');
				}
				break;
		}

		return $block;
	}
}

/**
 *
 * Form builder for explanation form
 */
function ucb_mma_explanation() {
	$form = array();
	$explanation =<<<EOT
There are two ways to login to this site:
<ol>
<li>Calnet</li>
<li>Standard authentication (Drupal)</li>
</ol>
<p>In general, University of California Berekeley staff, students and affiliates should use Calnet. Everyone else should use Standard.</p>
<p><b>When is it appropriate to change my login method?</b></p>
<ul>
<li>I chose the wrong method the first time I came to this site.</li>
<li>Someone else was using this browser and they use a different login method than I do.</li>
</ul>
<p><b>Why is my login method sometimes not retained?</b></p>
<p>Your login method is stored in a cookie. It will not be retained if you delete cookies on your browser or if you change to a new browser.</p>
<p><b>Is storing my login method in a cookie secure?</b></p>
<p>This approach does not compromise security. It is true that someone could steal your cookie, but doing so would not grant them access to this site. The attacker would only have 
gained access to a cookie containing a number.  They would still have to defeat your login mechanism in order to gain access to the site.</p>
EOT;

	$form['explanation'] = array(
   '#value' => $explanation,
	);
	$form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Change Login Method',
	);
	$form['cancel'] = array(
	//  '#type' => 'button',
    '#value' => l(t('Cancel'), '', array('query' => '')),
    '#weight' => $form['submit']['#weight'] + 1,
	);

	return $form;
}

function ucb_mma_explanation_submit($form, &$form_state) {
	//expire the cookie
	//setcookie('mma_method', '', time() - 1, COOKIE_PATH);
	$_SESSION['messages'] = NULL; //clear the drupal_set_message if it exists
	drupal_goto('user', array('reset' => ''));
}
/**
 * Content for ucb_mma_block
 */
function ucb_mma_block_content() {
	global $_REQUEST, $_COOKIE; //TODO

	if ($_COOKIE['mma_method'] === '0') {
		include_once(drupal_get_path('module', 'cas') . '/cas.module');
		return drupal_get_form('cas_login_block');
	}
	elseif  ($_COOKIE['mma_method'] === '1') {
		return drupal_get_form('user_login_block');
	}
	else {
		return drupal_get_form('ucb_mma_login', 1);
	}
}

/**
 *
 * Check for enabled login blocks
 */
function ucb_mma_login_blocks_check() {
	//TODO: ucb_cas needs this too
	$theme = variable_get('theme_default', '');
	$blocks = _block_rehash($theme);
	$login_blocks = array();
	foreach ($blocks as $b) {
		if ((stripos($b['info'], 'login') !== FALSE) && ($b['region'] != -1)) {
			$login_blocks[$b['module']] = array($b['info'], $b['region']);
		}
	}
	return $login_blocks;
}
